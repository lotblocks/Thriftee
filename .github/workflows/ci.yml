name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  CARGO_TERM_COLOR: always
  NODE_VERSION: '18'
  RUST_VERSION: '1.75'

jobs:
  # Frontend Tests
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run type checking
      run: npm run type-check
      
    - name: Run unit tests
      run: npm run test:coverage
      
    - name: Run integration tests
      run: npm run test:integration
      
    - name: Run accessibility tests
      run: npm run test:a11y
      
    - name: Run performance tests
      run: npm run test:performance
      
    - name: Build application
      run: npm run build
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/
        retention-days: 7

  # Backend Tests
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
        
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: raffle_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Rust
      uses: actions-rs/toolchain@v1
      with:
        toolchain: ${{ env.RUST_VERSION }}
        profile: minimal
        override: true
        components: rustfmt, clippy
        
    - name: Cache Rust dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/bin/
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
          backend/target/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpq-dev
        
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Run unit tests
      run: cargo test --lib
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/raffle_test
        REDIS_URL: redis://localhost:6379
        
    - name: Run integration tests
      run: cargo test --test '*'
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/raffle_test
        REDIS_URL: redis://localhost:6379
        
    - name: Generate coverage report
      run: |
        cargo install cargo-tarpaulin
        cargo tarpaulin --out xml --output-dir coverage/
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/raffle_test
        REDIS_URL: redis://localhost:6379
        
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage/cobertura.xml
        flags: backend
        name: backend-coverage
        
    - name: Build release binary
      run: cargo build --release
      
    - name: Upload binary artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-binary
        path: backend/target/release/raffle-platform-backend
        retention-days: 7

  # Smart Contract Tests
  contracts-tests:
    name: Smart Contract Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./contracts
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: contracts/package-lock.json
        
    - name: Install dependencies
      run: npm ci
      
    - name: Compile contracts
      run: npx hardhat compile
      
    - name: Run contract tests
      run: npx hardhat test
      
    - name: Run coverage
      run: npx hardhat coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./contracts/coverage/lcov.info
        flags: contracts
        name: contracts-coverage

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
          p/rust
          p/javascript
          p/typescript
          
    - name: Rust security audit
      run: |
        cargo install cargo-audit
        cd backend && cargo audit
        
    - name: Node.js security audit
      run: |
        cd frontend && npm audit --audit-level high
        cd ../contracts && npm audit --audit-level high

  # Dependency Check
  dependency-check:
    name: Dependency Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Check for outdated dependencies
      run: |
        cd frontend && npm outdated || true
        cd ../contracts && npm outdated || true
        
    - name: Check Rust dependencies
      run: |
        cargo install cargo-outdated
        cd backend && cargo outdated
        
    - name: License check
      run: |
        cd frontend && npx license-checker --summary
        cd ../contracts && npx license-checker --summary

  # End-to-End Tests
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Download frontend build
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/
        
    - name: Download backend binary
      uses: actions/download-artifact@v3
      with:
        name: backend-binary
        path: backend/target/release/
        
    - name: Make backend binary executable
      run: chmod +x backend/target/release/raffle-platform-backend
      
    - name: Start services with Docker Compose
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
        
    - name: Run E2E tests
      run: |
        cd frontend
        npm ci
        npx playwright install
        npm run test:e2e
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: e2e-test-results
        path: frontend/test-results/
        retention-days: 7
        
    - name: Stop services
      if: always()
      run: docker-compose -f docker-compose.test.yml down

  # Performance Tests
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: frontend-build
        path: frontend/dist/
        
    - name: Download backend binary
      uses: actions/download-artifact@v3
      with:
        name: backend-binary
        path: backend/target/release/
        
    - name: Make backend binary executable
      run: chmod +x backend/target/release/raffle-platform-backend
      
    - name: Start services
      run: |
        docker-compose -f docker-compose.test.yml up -d
        sleep 30
        
    - name: Run Lighthouse CI
      run: |
        npm install -g @lhci/cli
        lhci autorun
      env:
        LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}
        
    - name: Run load tests
      run: |
        cd backend
        cargo install drill
        drill --benchmark load-test.yml --stats
        
    - name: Stop services
      if: always()
      run: docker-compose -f docker-compose.test.yml down

  # Build and Push Docker Images (only on main branch)
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, contracts-tests, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: |
          raffleplatform/backend
          raffleplatform/frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        tags: raffleplatform/backend:latest,raffleplatform/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile.prod
        push: true
        tags: raffleplatform/frontend:latest,raffleplatform/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          REACT_APP_API_URL=https://api.raffleplatform.com
          REACT_APP_WS_URL=wss://api.raffleplatform.com
          REACT_APP_CDN_URL=https://cdn.raffleplatform.com

  # Quality Gate
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, contracts-tests, security-scan, dependency-check]
    
    steps:
    - name: Check test results
      run: |
        echo "All tests passed successfully!"
        echo "Frontend tests: ✅"
        echo "Backend tests: ✅"
        echo "Contract tests: ✅"
        echo "Security scan: ✅"
        echo "Dependency check: ✅"
        
    - name: Quality gate passed
      run: echo "🎉 Quality gate passed! Ready for deployment."